<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:xanx="http://schemas.microsoft.com/developer/xanx/2005"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><META NAME="save" CONTENT="history"><title>Fuzzy Logic</title>
<style><!--
/***********************************************************
 *             SCRIPT-SUPPORTING STYLES
 ***********************************************************/

/* Defines the userData cache persistence mechanism. */
.userDataStyle
{
	behavior: url(#default#userData);
}

/* Used to save the scroll bar position when navigating away from a page. */
div.saveHistory
{
	behavior: url(#default#saveHistory);
}

/* Formats the expand/collapse images for all collapsible regions. */
img.toggle
{
	border: 0;
	margin-right: 5;
}

/* Formats the Language filter drop-down image. */
img#languageFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Members Options filter drop-down image. */
img#membersOptionsFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Collapse All/Expand All images. */
img#toggleAllImage
{
	margin-left: 0;
	vertical-align: middle;
}

/* Supports XLinks */
MSHelp\:link
{
 	text-decoration: underline;
	color: #0000ff; 
	hoverColor: #3366ff;
	filterString: ;
}


body
	{
	background:	#FFFFFF;
	color: #000000;
	font-family:	Verdana;
	font-size: medium;
	font-style: normal;
	font-weight: normal;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	width:	100%;
	/*font-size: 110%;*/
	}

div.section
	{
	margin-left: 15px;
	}

div.hxnx5
	{
	margin-left: 1.5em;
	}

/* Font for all headings */	
h1, h2, h3, h4, h5, h6
	{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	margin-top: 18;
	margin-bottom: 8; 
	font-weight: bold;
	}
h1
	{
	font-size: 130%;
	color: #003399;
	}
div#scrollyes h1 /* Changes font size for full-scrolling topic */
	{
	font-size: 150%;
	}
h2
	{
	font-size: 125%;
	}
h3
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h4
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h5
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h6
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}

ul p, ol p, dl p
	{
	margin-left: 0em;
	}

p
	{
	margin-top: .6em;
	margin-bottom: .6em;
	}
	
td p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

dd p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

.image
	{
	text-align: center;
	}

dl
	{
	margin-top: 0em; 
	margin-bottom: 1.3em;
	}

dd
	{
	margin-bottom: 0em;
	margin-left: 0;
	}

dl.glossary dd 
{
	margin-bottom: 0em;  
	margin-left: 1.5em; 
}

dt
	{
	margin-top: .6em;
	margin-bottom: 1;
	}

ul, ol
	{
	margin-top: 0.6em;
	margin-bottom: 0.6em; 	
	}
	
ol
	{
	margin-left: 2.5em; 
	
	}	
	
ul
	{
	list-style-type: disc; 
	margin-left: 1.9em; 
	}

li
	{
	margin-bottom: 0.4em;
	}

ul ol, ol ol
	{
	list-style-type: lower-alpha;
	}

pre
	{
	margin-top: .6em;
	margin-bottom: .6em; 
	}

pre
	{
	font: 105% Lucida, mono; 
	color: #000066;
	}

code
{
	font-family: Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
}

table.userdata td 
	{
	background: #ffffff;
	background-color: #F5F5F5;
	border-color: #ffffff;
	border: none;
	}	
table.clsWarning
	{
	background: #ffffff;
	padding: 0px;
	margin: 0px;
	border: none;
	}
table.clsWarning td
	{
	padding: 0px;
	margin: 0px;
	background: #ffffff;
	vertical-align: middle;
	font-size: 70%;
	}

div#mainSection table
	{
	width: 98%;
	background: #ffffff;
	margin-top: 5px;
	margin-bottom: 5px;
	}

div#mainSection table th
	{ 
	padding: 5px 6px;
	background: #EFEFF7;
	text-align: left;
	font-size: 70%;
	vertical-align: bottom;
	border-bottom: 1px solid #C8CDDE;
	}
div#mainSection table td
	{ 
	padding: 5px 5px;
	background: #F7F7FF;
	vertical-align: top;
	font-size: 70%;
	border-bottom: 1px solid #D5D5D3;
	}

div#syntaxCodeBlocks table th
	{
	padding: 1px 6px;
	color: #000066;
	}

div#syntaxCodeBlocks table td
	{
	padding: 1px 5px;
	}

/* Applies to the running header text in the first row of the upper table in the
   non-scrolling header region. */
span#runningHeaderText
{
	color: #003399;
	font-size: 90%;
	padding-left: 13;
}

/* Applies to the topic title in the second row of the upper table in the
   non-scrolling header region. */
span#nsrTitle
{
	color: #003399;
	font-size: 120%;
	font-weight: 600;
	padding-left: 13;
}

/* Applies to everything below the non-scrolling header region. */
div#mainSection
{
	font-size: 70%;
	width: 100%;
}

/* Applies to everything below the non-scrolling header region, minus the footer. */
div#mainBody
{
	font-size: 90%;
	margin-left: 15;
	margin-top: 10;
	padding-bottom: 20;
}

/* Adds right padding for all blocks in mainBody */
div#mainBody p, div#mainBody ol, div#mainBody ul, div#mainBody dl
{
	padding-right: 5;
}

div#mainBody div.alert, div#mainBody div.code, div#mainBody div.tableSection
{
	width:98.9%;
}

div.alert p, div.code p
{
	margin-top:5;
	margin-bottom:8;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
div#mainSection div.alert table
{
	border: 0;
}

div#mainSection div.alert table th
{
	padding-top: 0;
	padding-bottom: 0;
	padding-left: 5;
	padding-right: 5;
}

div#mainSection div.alert table td
{
	padding-left: 5;
	padding-right: 5;
}

img.note
{
	border: 0;
	margin-left: 0;
	margin-right: 3;
}
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - End Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Non-scrolling Header Region Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Applies to the entire non-scrolling header region. */
div#header
{
	background-color: #D4DFFF;
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	0;
	padding-right:	0;
	width:	100%;
}

/* Applies to both tables in the non-scrolling header region. */
div#header table
{
	margin-top:	0;
	margin-bottom: 0;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	background: #D4DFFF;
	width:	100%;
}

/* Applies to cells in both tables in the non-scrolling header region. */
div#header table td
{
	color: #0000FF;
	font-size: 70%;
	padding-right: 20;
	padding-top: 1;
	padding-bottom: 1;
	border: none;
	background: #D4DFFF;
}

/* Applies to the last row in the upper table of the non-scrolling header region. Text 
   in this row includes See Also, Constructors, Methods, and Properties. */
div#header table tr#headerTableRow3 td
{
	padding-bottom: 2;
	padding-top: 5;
	padding-left: 15;
}

/* Applies to the lower table in the non-scrolling header region. Text in this table
   includes Collapse All/Expand All, Language Filter, and Members Options. */
div#header table#bottomTable
{
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	text-align: left;
	padding-left: 15;
}


blockquote
	{
	margin-left: 3.8em;
	margin-right: 3.8em;
	margin-top: .6em;
	margin-bottom: .6em;
	}

sup
	{
	text-decoration: none;
	font-size: smaller; 
	}

a:link
	{
	color: #0000FF;
/*    font-weight: bold */
	}
	
a:visited
	{
	color: #0000AA;
/*    font-weight: bold	*/
	}
	
a:hover
	{
	color: #3366FF;
/*    font-weight: bold */
	}
	
.label
	{
	font-weight: bold; 
	margin-top: 1em;
	margin-left: -26px;
	}
	
.tl
	{
	margin-bottom: .75em; 
	}
	
.atl
	{
	padding-left: 1.5em;
	padding-bottom: .75em; 
	}
	
.cfe
	{
	font-weight: bold; 
	}
	
.mini
	{
	font-size: smaller;
	}
	
.dt
	{
	margin-bottom: -.6em; 
	}
	
.indent
	{
	margin-left: 1.9em; 
	margin-right: 1.9em;
	}

.product
	{
	text-align: right;
	color: #333333;
	font-size: smaller;
	font-style: italic;
	}

.buttonbarshade
	{
	position: relative;
	margin: 0;
	left: 0px;
	top: 2;
	width: 50%;
	height: 40px;
	}

.buttonbartable
	{
	position: absolute;
	margin: 0;
	padding:0;
	border:0;
	left:0px;
	top: 2;
	width: 100%;
	height: 40px;
	}

/* background color, font for header */ 
table.buttonbartable td, table.buttonbarshade td
	{
	background: #ffffff; /*#5177B8; #80C615;*/
	border-left: 0px solid #80C615;
	margin: 0;
	padding: 0px 0px 0px 0px;
	font-family: Impact, sans-serif;
	font-size: 14pt;
	}

table.buttonbartable td.button1
	{
	background: #5177B8; /*#80C615;*/;
	padding: 0;
	font-weight: bold;
	text-align: center;
	cursor: hand;
	}

table.buttonbartable td.button2
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.button3
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.runninghead
	{
	padding-left: 0px;
	font-style: italic;
	text-align: left;
	}

.version
	{
	text-align: left;
	color: #000000;
	margin-top: 3em;
	margin-left: -26px;
	font-size: smaller;
	font-style: italic;
	}

.lang, .ilang
	{
	color: #0000ff;
	font: normal 7pt Arial, Helvetica, sans-serif;
	}

div.langMenu
	{
	position: absolute;
	z-index: 1;
	width: 96pt;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.langMenu ul
	{
	padding-left: 2em;
	margin-left: 0;
	}

div.filtered
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: 2px solid #aaaacc;
	background: #ffffff;
	}

div.filtered2
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: none;
	background: #ffffff;
	}

div.filtered h1, div.filtered h2, div.filtered h3, div.filtered h4
	{
	margin-left: -22px;
	}

div.filtered span.lang
	{
	position: relative;
	left: -22px;
	}

div.reftip
	{
	position: absolute;
	z-index: 1;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

a.synParam
	{
	color: #0000FF;
	/*color: #3F7800;*/ 	
	/*color: #8DC54F;*/
	text-decoration: none;
    font-weight: normal;
	}

a.synParam:hover
	{
	text-decoration: underline;
    font-weight: normal;
	}

div.sapop
	{
	position: absolute;
	z-index: 1;
	left: 26px;
	width: 100%;
	padding: 10px 10px 10px 36px;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.footer
	{
	width: 100%;
	border: none;
	background: #ffffff;
	margin-top: 18pt;
	padding-bottom: 12pt;
	color: #0000FF;
	/*color: #228B22; */
	text-align: center;
	font-size: 76%;
	}

div.preliminary
	{
	margin-top: 8pt;
	padding-bottom: 12pt;
	color: #A0A0A0;
	}

/* A procedure section. eg. 'To create a file', 'To add a value' */
div.proc
    {
	margin-left: 0.5em; 
    }
     
/* The title of a 'procedure' section. */
div.proc h3
    {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-weight: bold;
	font-size: 115%;
	margin-top: 1em;
	margin-bottom: 0.4em;
	margin-left: -0.5em; 
	color: #003399;
    }

div.proc ul
    {
    margin-left: 1.5em;
    }

div.proc ol
    {
    margin-left: 2.0em;
    }
      
.note
	{
	margin-left: 14pt;
	margin-right: 12pt;
	}

.indent1
	{
	margin-left: 12pt;
	}

.indent2
	{
	margin-left: 24pt;
	}

.indent3
	{
	margin-left: 36pt;
	}

p.proch
	{
	padding-left: 16px;
	}

p.proch img
	{
	position: relative; 
	vertical-align: top;
	left: -18px; 
	margin-right: -14px; 
	margin-bottom: -18px;
	}
	
div.clsPlatSpec
{
	background-color:#FFF8DC;
	border-style:solid;
	border-width:1pt 0pt 0pt 1pt;
	border-color:#ffE4C4;
	margin-top:0.6em;
	width:100%;
}


/* Applies to the language labels in the Language Filter drop-down list. */
.languageFilter
{
	color:	#0000FF;
	cursor:hand;
	text-decoration:underline;
	padding-bottom:4;
}

/* Dropdown areas */

#languageSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}

#membersOptionsSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}
--></style>

<xml>
<MSHelp:TOCTitle Title="Fuzzy Logic" />
<MSHelp:RLTitle Title="Fuzzy Logic" />
<MSHelp:Keyword Index="A" Term="O:Microsoft.Xna.FuzzyLogic" />
<MSHelp:Keyword Index="A" Term="2ff3b7d8-c52e-bb57-cb9a-ece30de1d0c6" />
<MSHelp:Keyword Index="K" Term="Fuzzy Logic" />
<MSHelp:Attr Name="ProjType" Value="LocalProj" />
<MSHelp:Attr Name="ProjType" Value="XNA_20" />
<MSHelp:Attr Name="DocSet" Value="XNA" />
<MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
<MSHelp:Attr Name="DocSet" Value="C#" />
<MSHelp:Attr Name="Locale" Value="en-us" />
<MSHelp:Attr Name="AssetID" Value="2ff3b7d8-c52e-bb57-cb9a-ece30de1d0c6" />
<MSHelp:Attr Name="TopicType" Value="kbOrient" />
</xml>
</head><body><div id="mainSection"><div id="mainBody">

	<h1>Fuzzy Logic</h1>
	
		This sample shows how an AI can use fuzzy logic to make decisions. It also demonstrates a
		method for organizing different AI behaviors, similar to a state machine.
	
	<a name="ID2EK"></a><h1 class="heading">Sample Overview</h1><div id="ID2EK" class="hxnx1">
		
		<p>
			When you program the AI for your games, you know that your actors often have to choose
			between several different options. In many cases, the choice is black and white: if you see the player,
			attack him. However, the decision making process is often much less clear cut. If you are low on health,
			go find a med kit. If there is a powerup nearby, pick it up. But how do you define "low on health," or "nearby?"
			And what if you're both low on health and also near a powerup? Which action is more important? You can give
			your AI actors the ability to make these kinds of "fuzzy" decisions by using fuzzy logic.
		</p>
		<p>
			In this sample, we use some of the behaviors introduced in the chase and evade sample to demonstrate
			one way that an AI actor can use fuzzy logic to make a decision. The sample employs a tank and fifteen mice.
			The tank chases the mice, and the mice flee from the tank. The tank uses fuzzy logic to decide which
			mouse would be best to chase. The user is given control over several factors that influence the tank's
			decision-making process.
		</p>
		<p>
			In addition, the sample demonstrates a design pattern that can be useful when programming AI: pluggable behaviors.
			This pattern separates an entity from the logic for its AI behavior, allowing the behavior logic to be reused by
			multiple entities.
		</p>
		<p>
			This sample is based on the Chase and Evade sample, and assumes that the reader is familiar with the code and
			concepts explained in that sample.
		</p>
		<a name="ID2EW"></a>

		<a name="ID2ECB"></a><h2 class="subHeading">Sample Controls</h2><div id="ID2ECB" class="hxnx2">
			
			<p>This sample uses the following keyboard and gamepad controls.</p>
			<table>
				<tr>
					<th>Action</th>
					<th>Keyboard Control</th>
					<th>Gamepad Control</th>
					<th>Windows Phone</th>
				</tr>
				<tr>
					<td>Select fuzzy weight.</td>
					<td>UP ARROW, DOWN ARROW</td>
					<td>Left thumb stick or D-Pad Up and Down</td>
					<td>Drag bar</td>
				</tr>
				<tr>
					<td>Modify fuzzy weight.</td>
					<td>LEFT ARROW, RIGHT ARROW</td>
					<td>Left thumb stick or D-Pad Left and Right</td>
					<td>Drag bar</td>
				</tr>
				<tr>
					<td>Exit.</td>
					<td>ESC or ALT+F4</td>
					<td>
						<b>BACK</b>
					</td>
					<td>
						<b>BACK</b>
					</td>
				</tr>
			</table>
		</div>
	</div>

	<a name="ID2EUC"></a><h1 class="heading">How the Sample Works</h1><div id="ID2EUC" class="hxnx1">
		
		<a name="ID2EYC"></a><h2 class="subHeading">Fuzzy Logic</h2><div id="ID2EYC" class="hxnx2">
			
			<p>
				The most interesting part of the sample is in the function <code>Tank.ChooseMouse</code>, which
				uses fuzzy logic to decide which mouse is best to chase. Obviously, deciding
				which mouse is "best" isn't a black and white choice. For example, imagine the
				tank is trying to choose between two mice. The first is only 20 units away, but is
				directly behind the tank. The second is 50 units away, but straight ahead. Which of
				these mice is the tank more likely to catch, and therefore the better one to chase?
			</p>
			<p>
				The tank has three factors to consider:</p>
				<ol>
					<li>If the mouse is nearby, it is a good mouse to chase.</li>
					<li>If the mouse is in front of me, it is a good mouse to chase.</li>
					<li>If I have been chasing this mouse for a long time, it is a good mouse to chase.</li>
				</ol>
			<p>
        Our end goal is a number that represents how "good" each mouse is. Then, it's simple
				to examine all of the mice, comparing each of their numbers to determine which is best.
				So how do we arrive at that number?
			</p>
			<p>
				First, for each of the three factors, we generate a number from 0 to 1 that indicates
				how true it is. For example, if the tank is near the mouse, the value will be 1;
				if the tank is far away, the value will be 0. Next, we take the three values and
				combine them. That's the number that tells us how good each mouse is.
			</p>
			<a name="ID2EQD"></a><h4 class="subHeading">Calculating the Fuzzy Factors</h4><div id="ID2EQD" class="hxnx3">
				

				<p>
					The tricky part of this is generating the 0..1 number that represents how true
					each factor is. Consider the graph below, which shows how we get the number for the first
					factor, distance.
				</p>
				<img src="Documentation/FuzzyDistance.png">
				<p>
					In this graph, we have a simple linear function that goes from 1.0 at some point
					<b>MinDistance</b>, to 0.0 at <b>MaxDistance</b>. The ends of the function are clamped so that
					the values can't go past 0 and 1. Again, all this means is that a mouse that is
					<b>MinDistance</b> units away is considered to be nearby, and is therefore a good mouse to chase.
					A mouse that is <b>MaxDistance</b> units away is <i>not</i> nearby, and is not
					a good mouse to chase. To find out how close a mouse is, all we have to do is plug
					its distance into our function, and we get that 0..1 number that we want.
				</p>
				<p>
					Min and Max distance are constants that are decided upon mostly via trial and error. In this
					sample, a mouse that is 175 pixels away is considered far away. A mouse that is 0 pixels
					away is considered nearby.
				</p>
				<p>
					We can use the same process to generate our 0..1 number for the second factor. Instead of
					distance, we'll use the difference between the tank's orientation and the angle to the mouse.
					If the difference is small, the mouse is right in front of the tank, and the value should be close to 1.
					If the difference is large, the value should be close to 0.
				</p>
				<img src="Documentation/FuzzyAngle.png">
				<p>
					We'll need two more constants, <b>MinAngle</b> and <b>MaxAngle</b>. In the sample, <b>MaxAngle</b> is
					defined as 90 degrees.
				</p>
				<p>
					The third factor, time, is a little different. As time increases, we want our 0..1 number to increase as well.
					The other two factors were the opposite: an increase in distance caused the 0..1 number to <i>decrease</i>.
					So the function for time looks like this:
				</p>
				<img src="Documentation/FuzzyTime.png">
				<p>
					Conceptually, this is the same idea as the other two, but the code differs slightly.
				</p>
			</div>
			<a name="ID2EBF"></a><h4 class="subHeading">Combining the Fuzzy Factors</h4><div id="ID2EBF" class="hxnx3">
				
				<p>
					Now that we've calculated the three 0..1 fuzzy factors that tell us how good a mouse is, we have
					to combine them to get the finished value, which we can then compare against other mice.
					The easiest way to combine the three values is to simply add them together. Adding works fine
					in many cases, but we use a slightly more complicated technique that allows us a bit more
					fine-grained control over the tank's behavior.
				</p>
				<p>
					We first give the tank a set of three "weights," one for each of the three fuzzy factors. Each 
					weight is a value from 0 to 1, and represents how much importance is given to each factor.
					A weight of 0 means that the tank's AI does not consider the associated fuzzy factor to be important.
					A weight of 1 gives the associated factor the maximum importance.
				</p>
				<p>
					Implementing these weights is pretty easy. When we combine the three fuzzy factors, we multiply each
					of the factors by its weight, and then add the three weighted factors together. The result is the finished value
					that we can use to compare against other mice. By multiplying each factor by its weight before combining it with the
					others, we get exactly the effect we are looking for: factors with relatively smaller weights have less influence
					on the final value, and if the weight is 0 the factor is completely ignored.
				</p>
				<p>
					In this sample, the user can modify the weights. By default, the tank has an equal weight
					for all factors, so the factors are equally important. By adjusting these weights, it is simple to
					change the way the tank behaves. One set of weights can give a tank a very different personality than
					another set might. Play around, and see how different sets of weights make the tank behave differently!
					For example, try turning the weight for distance all the way up, and the other two weights all the way down.
					The tank will decide who to chase based entirely on distance, which will make him very erratic. Since time
					and angle are being ignored in this case, the tank will change targets often, even if the new target is
					directly behind him. Or, try turning the weight for time all the way up, again minimizing the other two.
					This will make the tank very tenacious: once he picks a target he'll stick with it, even if another mouse gets closer.
				</p>
				<p>
					Note that the actual values of the weights are not really important: it is the ratio between the weights
					that is important. In other words, a tank with weights that are all 0.5 behaves the same as a tank with weights
					that are all 1.0.
				</p>
			</div>
		</div>
		<a name="ID2ERF"></a><h2 class="subHeading">Entities and Behaviors</h2><div id="ID2ERF" class="hxnx2">
			
			<p>
				Aside from fuzzy logic, the other concept that this sample introduces is a useful design pattern for AI
				programming. This system is built around two central classes: <code>Entity</code> and <code>Behavior</code>.
				An entity represents the actual game object, such as the Tank or the Mouse. Behaviors control what the
				entities are doing at any time. This sample uses three behaviors: Chase, Wander, and Evade.
				For example, if the Tank's current behavior is <code>WanderBehavior</code>, the tank will wander around the screen.
				If it is <code>ChaseBehavior</code>, it will chase a mouse. This split between entities and behaviors makes the code easy 
        to reuse. In this sample, the Tank and Mouse both use the <code>WanderBehavior</code>. The division also makes
				code much more legible, by splitting apart the logic of "what should I do" and "how should I do it."
			
    </p>
    <p>
				In this sample, when an <code>Entity</code> updates, it uses the <code>ChooseBehavior</code> function to decide how to
				act this frame. Then, it tells that behavior to update. That behavior makes the entity speed up, slow down,
				and turn, so that it acts out the desired behavior.
			</p>
		</div>
	</div>
	<a name="ID2ELG"></a><h1 class="heading">Extending the Sample</h1><div id="ID2ELG" class="hxnx1">
		
		<ul>
			<li>
				Any mouse that is further than <b>MaxDistance</b> away is ignored. Add disqualifying times and angles; for example, limit the tank's
        interest to those no more than 90 degrees away from its current direction, or force it to give up after chasing the same mouse 
        for 30 seconds.  This could be implemented by checking the limits inside the <code>CalculateFuzzy*</code> methods. The methods could be changed to return a
				nullable float, and would return null if the mouse should be disqualified.
			</li>
			<li>
				The fuzzy weights are clamped between 0 and 1 for for simplicity's sake, but they do not need to be clamped.
				You can get some interesting behaviors by allowing negative values, such as a tank that gives up on targets as soon
				as another becomes available.
			</li>
			<li>
				Implement interesting crowd behaviors by making the mice choose to chase one another at some times,
				and avoid one another at others.
			</li>
			<li>
				Add more than just one tank to the game. They could	be opponents: each one could be a different color and have a random personality.
			</li>
			<li>
				Use the concepts explained in this sample to add computer-controlled opponents to one of the mini games or starter kits.
			</li>
		</ul>
	</div>
</div><div class="footer" id="footer"><p>© 2010 Microsoft Corporation. All rights reserved.<br>Send feedback to 
		<a href="mailto:creators@microsoft.com?subject=Documentation Feedback: Fuzzy Logic">
		creators@microsoft.com</a>.</p></div></div></body></html>